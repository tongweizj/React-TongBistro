import { useState } from "react";
import BookSlot from "./BookSlot";
import { Formik, Field, Form, ErrorMessage } from "formik";
import {
  Box,
  Button,
  Flex,
  FormControl,
  FormLabel,
  Input,
  Select,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  FormErrorMessage,
} from "@chakra-ui/react";
import { object, string, number, date } from "yup";
function BookingForm(props) {
  const [formData, setFormData] = useState({
    date: `${props.date}`,
    time: `${props.availableTimes}`,
    guests: "",
    occasion: "",
  });

  const handleInputChange = (e) => {
    console.log("name:", e.target.name, "value:", e.target.value);
    if (e.target.name === "date") {
      props.updateTimes(e.target.value);
    }
    setFormData((prevFormData) => ({
      ...prevFormData,
      [e.target.name]: e.target.value,
    }));
  };

  const ReservationSchema = object().shape({
    date: date()
      .default(() => new Date())
      .required("Required"),
    time: string()
      .max(20, "Must be 20 characters or less")
      .required("Required"),
    guests: number().required("Required").positive().integer(),
    occasion: string().required("Required"),
  });

  const listItems = props.availableTimes.map((item, index) => {
    return (
      <option value={item} key={index}>
        {item}
      </option>
    );
  });
  return (
    <div className="box highlight">
      <form className="booking-form" onSubmit={props.submitForm}>
        <label htmlFor="resDate">Choose date</label>
        <input
          id="resDate"
          placeholder="resDate"
          name="date"
          value={formData.date}
          onChange={handleInputChange}
          type="date"
          required
        />
        <BookSlot
          availableTimes={props.availableTimes}
          handleInputChange={handleInputChange}
        />
        <label htmlFor="guests">Number of guests</label>
        <input
          value={formData.guests}
          placeholder=""
          type="number"
          min="1"
          max="10"
          required
          id="guests"
          name="guests"
          onChange={handleInputChange}
        />
        <label htmlFor="occasion">Occasion</label>
        <select
          id="occasion"
          value=""
          name="occasion"
          onChange={handleInputChange}
          placeholder="Select option"
        >
          <option value="Birthday">Birthday</option>
          <option value="Anniversary">Anniversary</option>
        </select>
        <input type="submit" value="Book Now" />
      </form>
      <Flex align="left" justify="left" h="60vh">
        <Box bg="white" p={6} rounded="md" w={64}>
          <h1>Reservation Table</h1>
          <Formik
            initialValues={{
              date: "",
              time: "",
              guests: "",
              occasion: "",
              country: "",
            }}
            validationSchema={ReservationSchema}
            // onSubmit={props.submitForm}
            onSubmit={(values, { setSubmitting }) => {
              setTimeout(() => {
                alert(JSON.stringify(values, null, 2));
                setSubmitting(false);
              }, 400);
            }}
          >
            {(props) => (
              <Form>
                <FormControl>
                  <FormLabel htmlFor="country">Country</FormLabel>
                  <Select id="country" placeholder="Select country">
                    <option>United Arab Emirates</option>
                    <option>Nigeria</option>
                  </Select>
                </FormControl>
                <FormControl>
                  <FormLabel htmlFor="date">Choose date</FormLabel>
                  <Field
                    as={Input}
                    id="date"
                    name="date"
                    placeholder=""
                    type="date"
                    variant="filled"
                  />
                  <ErrorMessage name="date" />
                </FormControl>

                <FormControl>
                  <FormLabel htmlFor="time">Choose time</FormLabel>
                  <Field as="select" name="time">
                    {listItems}
                  </Field>
                  <ErrorMessage name="res-time" />
                </FormControl>
                <FormControl>
                  <FormLabel htmlFor="guests">Number of guests</FormLabel>
                  <NumberInput
                    id="guests"
                    name="guests"
                    defaultValue={3}
                    min={1}
                    max={12}
                  >
                    <NumberInputField />
                    <NumberInputStepper>
                      <NumberIncrementStepper />
                      <NumberDecrementStepper />
                    </NumberInputStepper>
                  </NumberInput>
                  <ErrorMessage name="time" />
                </FormControl>

                <FormControl>
                  <FormLabel htmlFor="occasion">Occasion</FormLabel>
                  <Select id="occasion" placeholder="Select option">
                    <option>Birthday</option>
                    <option>Anniversary</option>
                  </Select>
                  <ErrorMessage name="occasion" />
                </FormControl>

                <Field name="occasion">
                  {({ field, form }) => (
                    <FormControl>
                      <FormLabel>Occasion</FormLabel>
                      <Select {...field} placeholder="Select option">
                        <option>Birthday</option>
                        <option>Anniversary</option>
                      </Select>
                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>
                    </FormControl>
                  )}
                </Field>

                <br />
                <Button type="submit" colorScheme="purple" width="full">
                  Submit
                </Button>
              </Form>
            )}
          </Formik>
        </Box>
      </Flex>
    </div>
  );
}
export default BookingForm;
